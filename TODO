TODO 10-11-09
- fork Triathlon project alongside modified code
- Check whether Triathlon-... works
  - Auditor (Calibrator doesn't seem to do anything)
  + Breeder complains about nasty dependency error
    => from pyfann import libfann;dir(libfann) # reveals FANN_TRAIN_RPROP
    => not TRAIN_RPROP
  - change this to own version
  - give patch to main maintainer
"""
Traceback (most recent call last):
  File "Triathlon-Breeder.py", line 120, in <module>
    class NeuralNet():
  File "Triathlon-Breeder.py", line 128, in NeuralNet
    trainAlg           = libfann.TRAIN_RPROP,
AttributeError: 'module' object has no attribute 'TRAIN_RPROP'
"""
  - Player
    => Complains that there are no settings files
  - Analyzer
    => Spectogram seems to be horribly broken for some reason
    - find out reason
"""
Traceback (most recent call last):
  File "Triathlon-Analyzer.py", line 464, in NiaUpdate
    self.spectogramCanvas.newReading()
  File "Triathlon-Analyzer.py", line 263, in newReading
    self.OnDraw()
  File "Triathlon-Analyzer.py", line 251, in OnDraw
    glColorPointerf(self.spectralColorColumHistory[historyIndex])
  File "/usr/lib64/python2.6/site-packages/OpenGL/wrapper.py", line 343, in wrapperCall
    raise err
OpenGL.error.GLError: GLError(
	err = 1281,
	description = 'invalid value',
	baseOperation = glColorPointer,
	pyArgs = [
		array([[[ 1.        ,  1.        ,  1...
	],
	cArgs = [
		2,
		GL_FLOAT,
		0,
		array([[[ 1.        ,  1.        ,  1...
	],
	cArguments = (2, GL_FLOAT, 0, c_void_p(44900896))
)
"""

  
+ fix the udev permissions so pyusb can access the device
  + testing
- check on all slackbuilds, see if stuff can be added
  * info file etc.
+ write short documentation on how to get udev rule to work
  => copy 69-usb.rules to /etc/udev/rules.d
  => change the OWNER="user" to whatever `whoami` returns
  => replug ocz nia

TODO 28-11-09
+ figure out how to use patch in pyfann.SlackBuild
  => diff -uR file.old file.new > file.patch
  => diff -rupN path.old/ path.new > path.patch
  => patch -p1 < file.patch
+ install slackware vm guest
  + x86_64
  - x86
+ determine which packages have no external dependencies, put them in a list
+ determine whether wxpython subsumes wxgtk => yes
+ create a slackbuild for pyfann after installing fann
+ copy the slackbuild of some other pythonlib
+ build all dependencies
+ swig slackbuild probably does not have a arch for 64
- finish fann.SlackBuild
  - doinst.sh
  + fann.info
  + slack-desc
  - README
  - check for any patches, incorporate in SlackBuild
  - date slackbuild
- finish mdp.SlackBuild
  - doinst.sh
  - fann.info
  - slack-desc
  - README
  - check for any patches, incorporate in SlackBuild
  - date slackbuild

TODO 25-11-09
- must document how to get project up and running in slackware64
  => * build all dependencies...
  => * create group, give sudoer rights... for access to raw input
- must maintain all project dependencies and slackbuilds not in sbo.org
  => sbo.org: wxwidgets (must have: common and addons), wxpython, pyopengl, python-xlib, numpy, pyusb
  => not in sbo.org: python-mdp (ai), SWIG, fann, pyfann
- write slackbuilds for each missing slackbuild component
- apply for adding components to sbo.org
- build valgrind and kcachegrind and installpkg
- get ccache to work
- get icec or distcc
- get both to work
+ run python debugger pydb on the project
  => I wasn't patient enough trace the last call prior to the segfault
+ run pdb again, with noGL = False, trace the last call before segfault
  => opengl causes the crash in the vm guest no doubt about it
+ but running 'sudo gdb python' gave me a good error though:
  => Program received signal SIGSEGV, Segmentation fault.
  => [Switching to Thread 0xb7d236c0 (LWP 4487)]
  => 0xb552ab46 in glLightfv () from /usr/lib/libGL.so.1

TODO 22-11-09
- figure out if my pull from the svn is the latest
- write script to synchronize my git with their svn
+ debug whole application with pdb (python debug), to figure out where it segfaults => opengl
+ test 'glxgears' and 'glxinfo | grep direct | grep -o Yes' under vm
  => it works
- set udev rules to allow usb direct read access, so 'sudo' will not be necessary to run triathlon
+ must run image as 'sh start-tap.sh images/vdisk-linux-ubuntuserver.img tap0 e1000 "-usb -usbdevice host:1234:0000"'
  => to run with pass host usb to vm guest, add_usb in vm command line does not register device

TODO 15-11-09
+ install dependencies on ubuntu vm
+ pass "-usb -usbdevice `dmesg | grep "Brain" | egrep -o ":[0-9]{4}:[0-9]{4}." | sed 's/^:\|\.$//g'" to qemu-system-x86_64
+ run Triathlon => failed to run.
- tell Triathlon developers that a git repository has been created
